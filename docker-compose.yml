version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: autopublicador_db
    environment:
      POSTGRES_DB: autopublicador
      POSTGRES_USER: autopublicador_user
      POSTGRES_PASSWORD: autopublicador_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - autopublicador_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autopublicador_user -d autopublicador"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache y Celery
  redis:
    image: redis:7-alpine
    container_name: autopublicador_redis
    command: redis-server --appendonly yes --requirepass autopublicador_redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - autopublicador_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "autopublicador_redis_pass", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autopublicador_backend
    environment:
      # Base de datos
      DATABASE_URL: postgresql://autopublicador_user:autopublicador_pass@db:5432/autopublicador
      REDIS_URL: redis://:autopublicador_redis_pass@redis:6379/0
      
      # Seguridad
      SECRET_KEY: tu-clave-secreta-super-segura-para-produccion
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # APIs (CONFIGURAR CON TUS KEYS)
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      
      # Configuración de aplicación
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: INFO
      
      # Configuración de contenido
      DEFAULT_CONTENT_PROVIDER: deepseek
      DEFAULT_WORD_COUNT: 800
      CONTENT_LANGUAGE: es
      WRITING_STYLE: profesional
      KEYWORD_DENSITY_TARGET: 2.5
      
      # Modelos de IA
      DEEPSEEK_MODEL: deepseek-chat
      OPENAI_MODEL: gpt-4
      MAX_TOKENS: 2000
      TEMPERATURE: 0.7
      
      # Generación de imágenes
      ENABLE_IMAGE_GENERATION: "true"
      DALLE_MODEL: dall-e-3
      DEFAULT_IMAGE_SIZE: 1024x1024
      MAX_IMAGES_PER_CONTENT: 5
      IMAGES_STORAGE_PATH: /app/storage/images
      
      # Programador
      ENABLE_SCHEDULER: "true"
      DEFAULT_SCHEDULE_INTERVAL: daily
      MAX_DAILY_POSTS: 10
      
      # Analytics
      ENABLE_ANALYTICS: "true"
      ANALYTICS_RETENTION_DAYS: 365
      
      # Análisis de keywords
      SIMILARITY_THRESHOLD: 0.8
      MAX_KEYWORDS_BULK_ANALYSIS: 100
      
      # Rate limiting
      RATE_LIMIT_PER_MINUTE: 60
      RATE_LIMIT_PER_HOUR: 1000
      
    volumes:
      - ./backend:/app
      - backend_storage:/app/storage
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autopublicador_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker Celery para tareas asíncronas
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autopublicador_celery_worker
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      # Mismas variables que el backend
      DATABASE_URL: postgresql://autopublicador_user:autopublicador_pass@db:5432/autopublicador
      REDIS_URL: redis://:autopublicador_redis_pass@redis:6379/0
      SECRET_KEY: tu-clave-secreta-super-segura-para-produccion
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: INFO
    volumes:
      - ./backend:/app
      - backend_storage:/app/storage
    depends_on:
      - db
      - redis
      - backend
    networks:
      - autopublicador_network
    restart: unless-stopped

  # Celery Beat para tareas programadas
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autopublicador_celery_beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      # Mismas variables que el backend
      DATABASE_URL: postgresql://autopublicador_user:autopublicador_pass@db:5432/autopublicador
      REDIS_URL: redis://:autopublicador_redis_pass@redis:6379/0
      SECRET_KEY: tu-clave-secreta-super-segura-para-produccion
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: INFO
    volumes:
      - ./backend:/app
      - backend_storage:/app/storage
    depends_on:
      - db
      - redis
      - backend
    networks:
      - autopublicador_network
    restart: unless-stopped

  # Frontend React/Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: autopublicador_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_APP_NAME: Autopublicador Web
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - autopublicador_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx como proxy reverso (opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: autopublicador_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - backend_storage:/var/www/storage:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - autopublicador_network
    restart: unless-stopped
    profiles:
      - production

  # Flower para monitoreo de Celery (opcional)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autopublicador_flower
    command: celery -A app.core.celery flower --port=5555
    environment:
      REDIS_URL: redis://:autopublicador_redis_pass@redis:6379/0
      FLOWER_BASIC_AUTH: admin:flower123
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery_worker
    networks:
      - autopublicador_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Adminer para gestión de base de datos (opcional)
  adminer:
    image: adminer:latest
    container_name: autopublicador_adminer
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DESIGN: pepa-linha
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - autopublicador_network
    restart: unless-stopped
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_storage:
    driver: local

networks:
  autopublicador_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16